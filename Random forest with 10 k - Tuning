title: "Random Forest with 10 fold cross validation"
author: "Andy Tran"
date: "October 21, 2020"



import numpy as np
import pandas as pd 

dataset = pd.read_csv("rao_huvec_10kb.tads.boundary.4mer.features.csv")

#load dataset

from sklearn.preprocessing import LabelEncoder
 
X = dataset.iloc[:, 1:-1].values
y = dataset.iloc[:, -1].values
le = LabelEncoder()
y = le.fit_transform(y)
le.transform([0,1])


#split dataset into 20% test and 80% train

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test= train_test_split(X, y, test_size = 0.2, random_state= 1)


#set the scaler balance 
from sklearn.preprocessing import StandardScaler
feature_scaler = StandardScaler()
X_train = feature_scaler.fit_transform(X_train)
X_test = feature_scaler.transform(X_test)

# Random forest model
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=50,random_state=0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
print(accuracy_score(y_test, y_pred))
print("------------------------------------------")


#10 fold cross validation 

from sklearn.model_selection import cross_val_score
train_score = cross_val_score(classifier, X_train, y_train, scoring = 'accuracy', cv=10)
test_score = cross_val_score(classifier, X_test, y_test, scoring = 'accuracy', cv=10)

print("Train: ", train_score)
print("Mean: ", train_score.mean())
print("STD: ", train_score.std())
print("------------------------------------------")
print("Test: ", test_score)
print("Mean: ", test_score.mean())
print("STD: ", test_score.std())
print("------------------------------------------")

# Tuning parameter by using Gridseach VC
from sklearn.model_selection import GridSearchCV
grid_param = {
    'n_estimators': [50, 100,200],
    'criterion': ['gini', 'entropy'],
    'bootstrap': [True, False]
}

gd_sr = GridSearchCV(estimator=classifier,
                     param_grid=grid_param,
                     scoring='accuracy',
                     cv=10,
                     n_jobs=-1)
gd_sr.fit(X_train, y_train)
best_parameters = gd_sr.best_params_
print(best_parameters)

best_result = gd_sr.best_score_
print("Best Value: ", best_result)


